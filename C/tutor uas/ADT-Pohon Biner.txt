{Pandu Puncak Prawira/18219047}
Selektor:
Akar(P) = P↑.Info
Left(P) = P↑.Left
Right(P) = P↑.Right

function Search (P: BinTree, X: infotype) -> boolean
KamusLokal

Algoritma
    if not (IsTreeEmpty(P)) then
        if Akar(P) = X then
            -> true
        else
            -> Search (Left(P), X) or Search (Right(P),X)
    else
        -> false
{Ini kurang efisien. Bisa dibikin di cabang else yang search:
else 
    if Search(Left(P),X) then
        -> true
    else
        -> Search(Right(P))}


function IsSkewLeft (P: BinTree) -> boolean
KamusLokal

Algoritma
    if IsOneElmt then
        -> true
    else
        depend on P
            IsUnerLeft(P) : -> IsSkewLeft(P)
            IsUnerRight(P) : -> false
            IsBiner(P) : -> false

function IsSkewRight (P:BinTree) -> boolean
KamusLokal

Algoritma
    if IsOneElmt(P) then
        -> true
    else
        depend on P
            IsUnerLeft(P) : -> false
            IsUnerRight(P) : -> IsSkewRight(P)
            IsBinerP(P) : -> false

function Level (P: BinTree, X: infotype) -> integer
KamusLokal

Algoritma
    if IsOneElmt(P) then
        -> 1
    else
        if (Search(Left(P),X)) then
            -> 1 + Level(Left(P),X)
        else
            -> 1 + Level(Right(P),X)

procedure AddDaun (input/output P: BinTree,
                    input X, Y: infotype
                    input Kiri: boolean)
KamusLokal

Algoritma
    if (IsOneElmt(P)) then
        if Akar(P) = X then
            if Kiri then
                Left(P) <- Alokasi(Y)
            else
                Right(P) <- Alokasi(Y)
    else
        AddDaun(Left(P), X, Y, Kiri)
        ADdDaun(Right(P), X, Y, Kiri)
        {Di Pembahasan:
        depend on P
            IsUnerLeft(P): AddDaun((Left(P)), X, Y, Kiri)
            IsUnerRight(P): AddDaun(Right(P), X, Y, Kiri)
            IsBiner(P) :
                if(Search(Left(P),X)) then
                    AddDaun((Left(P)), X, Y, Kiri)
                else
                    AddDaun(Right(P), X, Y, Kiri)


procedure DelDaun (input/output P: BinTree,
                    input X: infotype)
KamusLokal
    N : address
Algoritma
    if (IsOneElmt(P)) then
        if (Akar(P) = X) then
            N <- P
            P <- Nil
            Dealokasi(N)
    else
        if Left(P) != Nil then
            DelDaun(Left(P),X)
        if Right(P) != Nil then
            DelDaun(Right(P),X)
